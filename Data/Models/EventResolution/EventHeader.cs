using Data.Models.Exceptions;
using System.Globalization;

namespace Data.Models.EventResolution
{
    /// <summary>
    /// Event Categories are for navigational purposes only.
    /// Instead of having one "anonymous" event that goes into a massive switch,
    /// we have multiple hubs that all have multiple listening ports for events.
    /// </summary>
    public enum EventCategory
    {
        //TODIDDLEY: These should be 1:1 with the hubs in Web proj. 
        None = 0,
        Player,
        User,
        Monster,
        Item,
        Scene
    }

    /// <summary>
    /// EventType indicates what the event is about
    /// READONLY    A player has requested information, but nothing should be persisted
    /// WRITE       When a player intends to do something that alters gamestate
    /// SERVER      The type generated by the game engine for various reasons. 
    ///             It was not created by players and has higher privileges
    /// </summary>
    public enum EventType
    {
        None = 0,
        Readonly,
        Write,
        Server
    }

    public class EventHeader
    {
        public EventCategory Category { get; set; }

        public EventType Type { get; set; }

        //Session -Auth, User, Player?
        // TODO?

        public string Action { get; set; }

        public static EventHeader FromString(string headerString)
        {
            var header = new EventHeader();
            
            header.ParseCategory(headerString)
                  .ParseType(headerString)
                  .ParseAction(headerString);

            return header;
        }

        private EventHeader ParseCategory(string headerstring)
        {
            //Note: These enum parses only go up to 9, if we get more entries, we need to parse 2 chars as a substring
            Category = (EventCategory)headerstring[0].ToInt();
            return this;
        }

        private EventHeader ParseType(string headerstring)
        {
            Type = (EventType)headerstring[1].ToInt();
            return this;
        }

        //Todo: We might make this one an enum as well?
        private EventHeader ParseAction(string headerstring)
        {
            Action = headerstring.Substring(2).ToLower(CultureInfo.InvariantCulture); //Todo: Scour the lands for yet more of these grand prospects to undertake when refining ye olde Code!
            return this;
        }

    }
}