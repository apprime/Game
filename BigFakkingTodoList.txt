1. 
SignalR uses Hubs and Groups to manage client connections.
We need to investigate how this should be setup for Game.sln™

Initially:
- Use groups for when players play together
- Use groups for chat, these can be managed freely by users

- Use hubs for functionality. Chat hub, User management hub(logon/off and such) and main game hub.
! ONGOING. We have hubs that can differntiate incoming events, but all outgoing events are still generic. TODO!

? Do we want to save users default groups? Persist in DB or just in memory?
? Can we use signlaR to also figure out whom to broadcast to? Using groups and maybe multilayer groups for this.
  We already have a game state tree that will allow us to rather quickly find players in the game world. This is 
  still going to need to exist since we also have game logic that uses the tree. 


? So, how do we make a generic location be specific? Inject a context object of some sort? We need to swap backgrounds, type of 
entities and so on. Or do we have a factory that can set all properties in a scene so that it is "indirectly" typed?
! ONGOING: We have builders for objects Theme and Difficulty that are supposed to contain settings for location. Then Factories that create Entities, but that is only just started.

? Can we have progression in a location, as in dialogue, cutscenes or similar that only occurs in specific orders and at specific times?
Are those also just properties of the location, or do we want an injected dependency also orchestrate how the location plays out? 

Either way we need a clever system for building generic location that contain entities of a reasonable difficulty level(enemies, rewards etc.)
UberFactory.cs?

3.
Player has objects spellbook and bucket as properties. A player doesn't actually do much by themselves, rather they cast spells to summon
creatures to fight for them. Still, the player needs several new methods to Cast spell, Assign a creature they control and issue them commands.
This so that player has options when attacking Admiral Aardwark

4.
AI - A single monster needs to be able to have different personalities. Aggressive, defensive, strength based or intelect based and whether it
likes to fight on its own or work as a team (add more stuff here). This way we can generate random encounters that are reasonably interesting even with only a few types of creatures

5.
Everything needs to be async. The game engine should never have to block a thread because of read/write or external requests.

6. 
A project entirely for data access(done). Contains:
- separate database for user info -> encryption, password hashing and various (.njet can handle this)
- Caching
- Data source abstractions - (done) - DataProviders do this.
- Mappings (and sql specs inside the concrete implementation of the abstraction)
- NO ENTITY FRAMEWORK
- Data analysis? Scheduled work for generating views of table data. Can be used for Read commands that need complex queries mostly,
but also for systematic updates of various kinds, like player stats, server status etc.
- Rollback gamestate - server should keep a saved cache so that the restarting application can load itself.
- Normal sql for the web project. It needs to serve content to REST API.

7.
API Documentation.
- Split API into logical hubs(ongoing)
- DOcument each method
	+ Name
	+ Description
	+ Input param
	+ Return values


8.
We need an overall structure for the JS-client.
Scratch that, the TypeScript client. (Setup done, client nonexistant)
We can't really use angular, but somehow it should resemble our hubs/events.

9.
Event structure needs redesign. 
a) Switch names around so that Event is base class and WriteEvent inherits. (makes more sense than to return readonly event that actually isnt readonly)
b) Change Process from GatherrData>Resolve>Persist>Broadcast to PreProcess>LockData>Act>ReleaseData>PostProcess>Broadcast
																PreProcess>Act>PostProcess>Broadcast for readonly

For Readonly, Act simply polls various repos and returns result.

For write:
PreProcess does input validation and casts strings into Id types.
LockData uses repos to fetch and lock instances of all things
Act will use Mutators to write to these objects
ReleaseData releases locks -> something clever here to automatically do this
PostProcess will create the EventResult and if needed create new events to push into engine.

Idea: handle locking and unlocking by having some sort of lazy wrapper for all items
var x = Lockable<T>(myId);
x.DuringLock(obj => obj.doStuff());

10.
IKnowChildren and IKnowParent are interfaces implemented by dataproviders but actually, also the objects provided should have these implemented.

11. 
We need to clean up the serialization of json in the event results. There is a lot of duplicate info and a lot of unnecessary info.

12.
Return events by type, not just by "broadcast" emit.

13.
Set up WSS protocol. Get a certificate. Handle Auth, Session Cookies, Reconnects and cleanups of players when user goes disconnects

14.
Secure the web - TLS, WSS, Secure cookies, change hashing algo to bcrypt, Sessions,  