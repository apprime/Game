1. 
SignalR uses Hubs and Groups to manage client connections.
We need to investigate how this should be setup for Game.sln™

Initially:
- Use groups for when players play together
- Use groups for chat, these can be managed freely by users

- Use hubs for functionality. Chat hub, User management hub(logon/off and such) and main game hub.

? Do we want to save users default groups? Persist in DB or just in memory?
? Can we use signlaR to also figure out whom to broadcast to? Using groups and maybe multilayer groups for this.
  We already have a game state tree that will allow us to rather quickly find players in the game world. This is 
  still going to need to exist since we also have game logic that uses the tree. 

2.
There needs to be a structure for how a place in game relates to other places in game. I.E A game state as a hierarchical tree.
Top node is all game, then branches for every major Region, then Locations in those regions. 
Each location has Scenes, instances of the location. Each scene has lists of live entities within it. A scene is generic.

? So, how do we make a generic scene be specific? Inject a context object of some sort? We need to swap backgrounds, type of 
entities and so on. Or do we have a factory that can set all properties in a scene so that it is "indirectly" typed?

? Can we have progression in a scene, as in dialogue, cutscenes or similar that only occurs in specific orders and at specific times?
Are those also just properties of the scene, or do we want an injected dependency also orchestrate how the scene plays out?

? What about "open world" where maybe all players want to see each other at a location? Does this mean there are two types of scenes,
one instanced and one open? 

Either way we need a clever system for building generic scenes that contain entities of a reasonable difficulty level(enemies, rewards etc.)
UberFactory.cs?

3.
Player has objects spellbook and bucket as properties. A player doesn't actually do much by themselves, rather they cast spells to summon
creatures to fight for them. Still, the player needs several new methods to Cast spell, Assign a creature they control and issue them commands.
This so that player has options when attacking Admiral Aardwark

4.
AI - A single monster needs to be able to have different personalities. Aggressive, defensive, strength based or intelect based and whether it
likes to fight on its own or work as a team. This way we can generate random encounters that are reasonably interesting even with only a few types of creatures

5.
Everything needs to be async. The game engine should never have to block a thread because of read/write or external requests.

